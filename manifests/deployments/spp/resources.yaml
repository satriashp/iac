---
# Source: spp/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
# Source: spp/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spp-mysql
  namespace: "prod"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.1
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: spp-mysql
---
# Source: spp/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: spp-redis
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
---
# Source: spp/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spp
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: spp/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: spp-mysql
  namespace: "prod"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.1
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "cGFzc3dvcmQ="
  mysql-password: "cGFzc3dvcmQ="
---
# Source: spp/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dockerhub
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  .dockerconfigjson: >-
    ewoJImF1dGhzIjogewoJCSJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOiB7CgkJCSJhdXRoIjogImMyRjBjbWxoYzJod09tUmphM0pmY0dGMFgwSkRhVUZYT0UxR1RHWk5ORmQwVjBsdFkydG5TbTgyZG0xZk1BPT0iCgkJfQoJfQp9
type: kubernetes.io/dockerconfigjson
---
# Source: spp/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spp-mysql
  namespace: "prod"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.1
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0

    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: spp/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spp-redis-configuration
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: spp/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spp-redis-health
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: spp/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spp-redis-scripts
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: spp/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spp
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  default.conf: |
    server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        root /var/www/html/public;
        index index.php index.html index.htm;

        error_log  /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;


        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass localhost:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }
        location / {
            try_files $uri $uri/ /index.php?$query_string;
            gzip_static on;
        }
    }

  .env: |
    APP_NAME=SPP
    APP_ENV=production
    APP_KEY=base64:7H0cRwTwuUdkRhhQEHWtXEG8hpdYWUJ9Xy0dB7xkapM=
    APP_DEBUG=false
    APP_URL=https://spp.lvh.me
    ASSET_URL=https://spp.lvh.me
    APP_PORT=80
    APP_SERVICE=app

    LOG_CHANNEL=stderr
    LOG_DEPRECATIONS_CHANNEL=null
    LOG_LEVEL=critical

    DB_CONNECTION=mysql
    DB_HOST=spp-mysql
    DB_PORT=3306
    DB_DATABASE=spp
    DB_USERNAME=default
    DB_PASSWORD=password

    BROADCAST_DRIVER=log
    CACHE_DRIVER=redis
    FILESYSTEM_DRIVER=local
    QUEUE_CONNECTION=redis
    SESSION_DRIVER=redis
    SESSION_LIFETIME=120

    MEMCACHED_HOST=127.0.0.1

    REDIS_HOST=spp-redis-master
    REDIS_PASSWORD=null
    REDIS_PORT=6379

    MAIL_MAILER=smtp
    MAIL_HOST=mailhog
    MAIL_PORT=1025
    MAIL_USERNAME=null
    MAIL_PASSWORD=null
    MAIL_ENCRYPTION=null
    MAIL_FROM_ADDRESS=null
    MAIL_FROM_NAME=SPP

    AWS_ACCESS_KEY_ID=default
    AWS_SECRET_ACCESS_KEY=password
    AWS_DEFAULT_REGION=ap-southeast-1
    AWS_BUCKET=local
    AWS_ENDPOINT=http://minio:9000
    AWS_USE_PATH_STYLE_ENDPOINT=false

    PUSHER_APP_ID=
    PUSHER_APP_KEY=
    PUSHER_APP_SECRET=
    PUSHER_APP_CLUSTER=mt1

    MIX_PUSHER_APP_KEY=
    MIX_PUSHER_APP_CLUSTER=

    TELEGRAM_BOT_TOKEN=
    TELEGRAM_GROUP_CHAT_ID=

    NOTIFICATION_CRONTAB=
    SENTRY_LARAVEL_DSN=null
    SENTRY_TRACES_SAMPLE_RATE=0.0
---
# Source: spp/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: spp-mysql-headless
  namespace: "prod"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.1
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: spp
    app.kubernetes.io/component: primary
---
# Source: spp/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: spp-mysql
  namespace: "prod"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.1
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: spp
    app.kubernetes.io/component: primary
---
# Source: spp/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: spp-redis-headless
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
  annotations:

spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: spp
---
# Source: spp/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spp-redis-master
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: spp
    app.kubernetes.io/component: master
---
# Source: spp/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spp
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
---
# Source: spp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spp
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spp
      app.kubernetes.io/instance: spp
  template:
    metadata:
      annotations:
        checksum/configmap: d2727551e648b04693a4c4cd30eb2e70350fe324ffee8f287bea000c8a0cf8a7
        linkerd.io/inject: enabled
      labels:
        app.kubernetes.io/name: spp
        app.kubernetes.io/instance: spp
    spec:
      serviceAccountName: spp
      securityContext:
        {}
      containers:
        - name: app
          securityContext:
            {}
          image: "registry.localhost:5000/spp:latest"
          imagePullPolicy: Always
          ports: []
          livenessProbe:
            tcpSocket:
              port: 9000
          readinessProbe:
            tcpSocket:
              port: 9000
          resources:
            limits:
              cpu: 1
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /var/www/html/.env
              name: spp
              subPath: .env

        - name: nginx
          securityContext:
            {}
          image: "registry.localhost:5000/spp-nginx:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 1
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: spp
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
      volumes:
        - configMap:
            name: spp
          name: spp
---
# Source: spp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spp-horizon
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp-horizon
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spp-horizon
      app.kubernetes.io/instance: spp
  template:
    metadata:
      annotations:
        checksum/configmap: d2727551e648b04693a4c4cd30eb2e70350fe324ffee8f287bea000c8a0cf8a7
        linkerd.io/inject: enabled
      labels:
        app.kubernetes.io/name: spp-horizon
        app.kubernetes.io/instance: spp
    spec:
      serviceAccountName: spp
      securityContext:
        {}
      containers:
        - name: horizon
          securityContext:
            {}
          image: "registry.localhost:5000/spp:latest"
          imagePullPolicy: Always
          command: ["/bin/sh"] # entrypoint
          args: # CMD
            [
              "-c",
              "php artisan horizon",
            ]
          ports: []
          resources:
            limits:
              cpu: 1
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /var/www/html/.env
              name: spp
              subPath: .env
      volumes:
        - configMap:
            name: spp
          name: spp
---
# Source: spp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spp-scheduler
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp-scheduler
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spp-scheduler
      app.kubernetes.io/instance: spp
  template:
    metadata:
      annotations:
        checksum/configmap: d2727551e648b04693a4c4cd30eb2e70350fe324ffee8f287bea000c8a0cf8a7
        linkerd.io/inject: enabled
      labels:
        app.kubernetes.io/name: spp-scheduler
        app.kubernetes.io/instance: spp
    spec:
      serviceAccountName: spp
      securityContext:
        {}
      containers:
        - name: scheduler
          securityContext:
            {}
          image: "registry.localhost:5000/spp:latest"
          imagePullPolicy: Always
          command: ["/bin/sh"] # entrypoint
          args: # CMD
            [
              "-c",
              "php artisan schedule:work",
            ]
          ports: []
          resources:
            limits:
              cpu: 1
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /var/www/html/.env
              name: spp
              subPath: .env
      volumes:
        - configMap:
            name: spp
          name: spp
---
# Source: spp/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: spp
  namespace: prod
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: spp
  minReplicas: 1
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: spp/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spp-mysql
  namespace: "prod"
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-9.4.1
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: spp
      app.kubernetes.io/component: primary
  serviceName: spp-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: c92a7bc0879d9d613c599fa4b7fda5fc41a355356633420e1ba97e1599e9f462
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-9.4.1
        app.kubernetes.io/instance: spp
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: spp-mysql

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: spp
                namespaces:
                  - "prod"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.31-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spp-mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "default"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spp-mysql
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: "spp"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: spp-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: spp
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: spp/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spp-redis-master
  namespace: "prod"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: spp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: spp
      app.kubernetes.io/component: master
  serviceName: spp-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.3.7
        app.kubernetes.io/instance: spp
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: c84419b2d38f1b0828aba1e318e5c50b5ce96442c51763d6f90dcb85da6d7b8d
        checksum/health: 6d528cbc671bcd18987f33eff275a1dc076768753175fe9a68fe7f5b0488c887
        checksum/scripts: 1120a284c5ae4b872f8dedb0a16e267b0180f589112e722f10ab7ea23948dcb6
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:

      securityContext:
        fsGroup: 1001
      serviceAccountName: spp-redis
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: spp
                    app.kubernetes.io/component: master
                namespaces:
                  - "prod"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.5-debian-11-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath:
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: spp-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: spp-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: spp-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: spp
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: spp/templates/emissary.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: spp-spp.lvh.me
  namespace: "prod"
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: spp-spp.lvh.me
  duration: 48h
  renewBefore: 25h
  issuerRef:
    name: root-trust-anchor
    kind: ClusterIssuer
  commonName: "spp.lvh.me"
  dnsNames:
  - "spp.lvh.me"
---
# Source: spp/templates/emissary.yaml
---
apiVersion: getambassador.io/v3alpha1
kind: Host
metadata:
  name: spp-spp.lvh.me
  namespace: "prod"
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  hostname: "spp.lvh.me"
  tlsSecret:
    name: spp-spp.lvh.me
  requestPolicy:
    insecure:
      action: Route
      additionalPort: -1
---
# Source: spp/templates/emissary.yaml
apiVersion: getambassador.io/v3alpha1
kind: Listener
metadata:
  name: spp-http
  namespace: "prod"
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  port: 8080
  protocol: HTTPS  # NOT A TYPO, see below
  securityModel: XFP
  hostBinding:
    namespace:
      from: SELF   # See below
---
# Source: spp/templates/emissary.yaml
apiVersion: getambassador.io/v3alpha1
kind: Listener
metadata:
  name: spp-https
  namespace: "prod"
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  port: 8443
  protocol: HTTPS
  securityModel: XFP
  hostBinding:
    namespace:
      from: SELF   # See below
---
# Source: spp/templates/emissary.yaml
apiVersion: getambassador.io/v3alpha1
kind:  Mapping
metadata:
  name: spp-spp.lvh.me
  namespace: "prod"
  labels:
    helm.sh/chart: spp-0.1.0
    app.kubernetes.io/name: spp
    app.kubernetes.io/instance: spp
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  prefix: /
  rewrite: ""
  service: spp:80
  hostname: "spp.lvh.me"
